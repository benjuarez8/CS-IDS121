Write the relational model schema for your airline database in this file, using
the notation we have used all term.  You can indicate primary key columns by
enclosing the attribute names in _ characters.  Include descriptions of other
candidate keys or foreign keys (if any) immediately under each relation schema.
Example:

foo(_a_, b, c)
 * b is also a candidate key
 * c is a foreign key to bar.c
------------------------------------------------------------------------------

-- [Problem 4]

airplanes(_aircraft_code_, manu_company, model)
 * no candidate keys or foreign keys (unless we can assume (manu_company, model) is unique)


seats(_aircraft_code_, _seat_number_, class, type, exit_row)
 * plane_seats was combined with seats such that the primary key for seats is (aircraft_code, seat_number) which eliminates the need for plane_seats due to the many-to-one relationship
 * aircraft_code is a foreign key to airplanes.aircraft_code


flights(_flight_number_, _flight_date_, flight_time, source, destination, domestic, aircraft_code)
 * plane_flights was efficiently combined with flights since they would share the same primary key because it is a many-to-one relationship
 * aircraft_code is a foreign key to airplanes.aircraft_code


customers(_customer_id_, first_name, last_name, email_address)
 * no candidate keys or foreign keys


purchasers(_customer_id_, card_number, expiration_date, verification_code)
 * customer_id is a foreign key to customers.customer_id


travelers(_customer_id_, passport_number, citizenship_country, emergency_contact, emergency_phone, frequent_flyer_number)
 * customer_id is a foreign key to customers.customer_id


customer_phones(_customer_id_, _phone_number_)
 * customer_phones was added since each customer could have one or more phone numbers
 * customer_id is a foreign key to customers.customer_id


purchases(_purchase_id_, purchase_date, confirmation, customer_id)
 * purchase_info was more efficiently combined with purchases since they share the same primary key due to the many-to-one relationship
 * confirmation is also a candidate key
 * customer_id is a foreign key to purchasers.customer_id


tickets(_ticket_id_, ticket_price, customer_id, purchase_id)
 * traveler_tix was combined with tickets since they would share the same primary key due to the many-to-one relationship
 * purchased_tix was combined with tickets since they would share the same primary key due to the many-to-one relationship
 * customer_id is a foreign key to travelers.customer_id
 * purchase_id is a foreign key to purchases.purchase_id


flight_info(_flight_number_, _flight_date_, _aircraft_code_, _seat_number_, ticket_id)
 * flight_info was kept since it efficiently keeps track of related primary keys
 * ticket_id is also a candidate key
 * flight_number is a foreign key to flights.flight_number
 * flight_date is a foreign key to flights.flight_date
 * aircraft_code is a foreign key to airplanes.aircraft_code
 * seat_number is a foreign key to seats.seat_number
 * ticket_id is a foreign key to tickets.ticket_id